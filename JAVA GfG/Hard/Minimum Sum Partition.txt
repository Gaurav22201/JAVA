Given an integer array arr of size N, the task is to divide it into two sets S1 and S2 such that the absolute 
difference between their sums is minimum and find the minimum difference


Example 1:

Input: N = 4, arr[] = {1, 6, 11, 5} 
Output: 1
Explanation: 
Subset1 = {1, 5, 6}, sum of Subset1 = 12 
Subset2 = {11}, sum of Subset2 = 11   

Example 2:

Input: N = 2, arr[] = {1, 4}
Output: 3
Explanation: 
Subset1 = {1}, sum of Subset1 = 1
Subset2 = {4}, sum of Subset2 = 4


Your Task:  
You don't need to read input or print anything. Complete the function minDifference() which takes N and array arr as 
input parameters and returns the integer value

// { Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;
class GfG
{
    public static void main(String args[])
        {
            Scanner sc = new Scanner(System.in);
            int t = sc.nextInt();
            while(t-->0)
                {
                    int n = sc.nextInt();
                    int A[] = new int[n];
                    for(int i = 0;i<n;i++)
                        A[i] = sc.nextInt();
                    Solution ob = new Solution();
                    System.out.println(ob.minDifference(A,n));
                }
        }
}    // } Driver Code Ends


//User function Template for Java

class Solution
{

	public int minDifference(int arr[], int n) 
	{ 
	    int sum = 0;
		for (int i = 0; i < n; i++)
			sum += arr[i];

		// Create an array to store
		// results of subproblems
		boolean dp[][] = new boolean[n + 1][sum + 1];

		// Initialize first column as true.
		// 0 sum is possible with all elements.
		for (int i = 0; i <= n; i++)
			dp[i][0] = true;

		// Initialize top row, except dp[0][0],
		// as false. With 0 elements, no other
		// sum except 0 is possible
		for (int i = 1; i <= sum; i++)
			dp[0][i] = false;

		// Fill the partition table
		// in bottom up manner
		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= sum; j++) {
				// If i'th element is excluded
				dp[i][j] = dp[i - 1][j];

				// If i'th element is included
				if (arr[i - 1] <= j)
					dp[i][j] |= dp[i - 1][j - arr[i - 1]];
			}
		}

		// Initialize difference of two sums.
		int diff = Integer.MAX_VALUE;

		// Find the largest j such that dp[n][j]
		// is true where j loops from sum/2 t0 0
		for (int j = sum / 2; j >= 0; j--) {
			// Find the
			if (dp[n][j] == true) {
				diff = sum - 2 * j;
				break;
			}
		}
		return diff;

	} 
}
