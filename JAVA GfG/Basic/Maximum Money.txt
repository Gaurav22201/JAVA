Given a street of N houses (a row of houses), each house having K amount of money kept inside; 
now there is a thief who is going to steal this money but he has a constraint/rule that 
he cannot steal/rob two adjacent houses. 
Find the maximum money he can rob.

// { Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader read =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while (t-- > 0) {
            String St[] = read.readLine().split(" ");
            int N = Integer.parseInt(St[0]);
            int K = Integer.parseInt(St[1]);

            Solution ob = new Solution();
            System.out.println(ob.maximizeMoney(N,K));
        }
    }
}// } Driver Code Ends


//User function Template for Java

class Solution {
    static int maximizeMoney(int N , int K) {
        int max;
        int temp;
        if(N%2==0){
            temp = N/2;
            max = temp*K;
        }else{
            temp = (N/2)+1;
            max = temp*K;
        }
        return max;
    }
};