Given an array Arr (distinct elements) of size N. Rearrange the elements of array in zig-zag fashion. 
The converted array should be in form a < b > c < d > e < f. The relative order of elements is same in the output i.e 
you have to iterate on the original array only.

Input:
N = 7
Arr[] = {4, 3, 7, 8, 6, 2, 1}
Output: 3 7 4 8 2 6 1
Explanation: 3 < 7 > 4 < 8 > 2 < 6 > 1

// { Driver Code Starts
//Initial Template for Java



import java.util.*;
import java.io.*;

public class Main {

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int tc = Integer.parseInt(br.readLine().trim());
        while (tc-- > 0) {
            String[] inputLine;
            int n = Integer.parseInt(br.readLine().trim());
            int[] arr = new int[n];
            inputLine = br.readLine().trim().split(" ");
            for (int i = 0; i < n; i++) {
                arr[i] = Integer.parseInt(inputLine[i]);
            }

            new Solution().zigZag(arr, n);
            for (int i = 0; i < n; i++) {
                System.out.print(arr[i] + " ");
            }
            System.out.println();
        }
    }
}// } Driver Code Ends


//User function Template for Java

class Solution {
    void swap(int[] arr, int i,int j){
       int tmp = arr[i];
       arr[i] = arr[j];
       arr[j] = tmp;
   }

    
    void zigZag(int arr[], int n) {
        for(int i=0;i<=arr.length-2;i++){
           if(i%2==0){
               if(arr[i]>arr[i+1]){
                  swap(arr,i,i+1);
               }
           }
           else{
               if(arr[i]<arr[i+1]){
                  swap(arr,i,i+1);
               }
           }
       }
   }
}

----------------------------------------------------------------------

GFG Method

// Java program to sort an array in Zig-Zag form
import java.util.Arrays;

class Test
{
	static int arr[] = new int[]{4, 3, 7, 8, 6, 2, 1};
	
	// Method for zig-zag conversion of array
	static void zigZag()
	{
		// Flag true indicates relation "<" is expected,
		// else ">" is expected. The first expected relation
		// is "<"
		boolean flag = true;
		
		int temp =0;
	
		for (int i=0; i<=arr.length-2; i++)
		{
			if (flag) /* "<" relation expected */
			{
				/* If we have a situation like A > B > C,
				we get A > B < C by swapping B and C */
				if (arr[i] > arr[i+1])
				{
					// swap
					temp = arr[i];
					arr[i] = arr[i+1];
					arr[i+1] = temp;
				}
				
			}
			else /* ">" relation expected */
			{
				/* If we have a situation like A < B < C,
				we get A < C > B by swapping B and C */
				if (arr[i] < arr[i+1])
				{
					// swap
					temp = arr[i];
					arr[i] = arr[i+1];
					arr[i+1] = temp;
				}
			}
			flag = !flag; /* flip flag */
		}
	}
	
	// Driver method to test the above function
	public static void main(String[] args)
	{
		zigZag();
		System.out.println(Arrays.toString(arr));
	}
}
