Given a sorted array Arr of size N and a number X, you need to find the number of occurrences of X in Arr.

in O(n)
// { Driver Code Starts
//Initial Template for Java



import java.util.*;
import java.io.*;

public class Main {

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int tc = Integer.parseInt(br.readLine().trim());
        while (tc-- > 0) {
            String[] inputLine;
            inputLine = br.readLine().trim().split(" ");
            int n = Integer.parseInt(inputLine[0]);
            int x = Integer.parseInt(inputLine[1]);
            int[] arr = new int[n];
            inputLine = br.readLine().trim().split(" ");
            for (int i = 0; i < n; i++) {
                arr[i] = Integer.parseInt(inputLine[i]);
            }

            int ans = new Solution().count(arr, n, x);
            System.out.println(ans);
        }
    }
}
// } Driver Code Ends


//User function Template for Java



class Solution {
    int count(int[] arr, int n, int x) {
        List<Integer> a = new ArrayList<>();
        for(int i:arr){
            a.add(i);
        }
        return Collections.frequency(a,x);
    }
}




in O(log n)
int count(int arr[], int n, int x) {
	    // code here
	    int freq = 0;
	    int i=0,j=n-1,mid=0;
	    while(i<=j){
	        mid = (i+j)/2;
	        if(arr[mid]==x){
	            break;
	        }
	        if(arr[mid]<x){
	            i = mid+1;
	        }
	        else if(arr[mid]>x){
	            j=mid-1;
	        }
	    }
	    if(arr[mid]==x){
	        freq++;
	        i=mid-1;j=mid+1;
	        while(arr[i]==x)freq++,i--;
	        while(arr[j]==x)freq++,j++;
	    }
	    return freq;
	}