Given an unlimited supply of coins of given denominations, 
find the minimum number of coins required to get the desired change.

For example, consider S = { 1, 3, 5, 7 }.
If the desired change is 15, the minimum number of coins required is 3
 
(7 + 7 + 1) or (5 + 5 + 5) or (3 + 5 + 7)
 
 
If the desired change is 18, the minimum number of coins required is 4
 
(7 + 7 + 3 + 1) or (5 + 5 + 5 + 3) or (7 + 5 + 5 + 1) 

class Solution {
int solve(int[] coins,int amount,int[] dp){
    if(amount<0){
        return 374839;
    }
    if(amount == 0){
        return 0;
    }
    if(dp[amount]!=0){
        return dp[amount];
    }
    int res=Integer.MAX_VALUE;
    for(int i=0;i<coins.length;i++){
        res=Math.min(res,1+solve(coins,amount-coins[i],dp));
    }
    return dp[amount]=res;
}
public int coinChange(int[] coins, int amount) {
    
    int[] dp=new int[amount+1];
    int ans=solve(coins,amount,dp);
    return ans>=374839?-1:ans;
}

}