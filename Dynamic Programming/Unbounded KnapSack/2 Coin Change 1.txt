Given a value N, if we want to make change for N cents, and we have infinite supply of each of S = { S1, S2, .. , Sm}
valued coins, how many ways can we make the change? The order of coins doesnâ€™t matter.
For example, for N = 4 and S = {1,2,3}, there are four solutions: {1,1,1,1},{1,1,2},{2,2},{1,3}. So output should be 4. 
For N = 10 and S = {2, 5, 3, 6}, 
there are five solutions: {2,2,2,2,2}, {2,2,3,3}, {2,2,6}, {2,3,5} and {5,5}. So the output should be 5.

import java.io.*;
import java.lang.*;
import java.util.*;

public class Main{

static int subsetSum(int a[], int n, int sum)
{
	
	// Initializing the matrix
	int tab[][] = new int[n + 1][sum + 1];

	// Initializing the first value of matrix
	tab[0][0] = 1;

	for(int i = 1; i <= sum; i++)
		tab[0][i] = 0;


	for(int i = 1; i <= n; i++)
	{
		for(int j = 0; j <= sum; j++)
		{
			
			// If the value is greater than the sum
			if (a[i - 1] > j)
				tab[i][j] = tab[i - 1][j];

			else
			{
				tab[i][j] = tab[i - 1][j] +
							tab[i][j - a[i - 1]];
			}
		}
	}

	return tab[n][sum];
}

// Driver Code
public static void main(String[] args)
{
	int n = 3;
	int a[] = { 1,2,3 };
	int sum = 5;

	System.out.print(subsetSum(a, n, sum));
}
}

// This code is contributed by Kingash
