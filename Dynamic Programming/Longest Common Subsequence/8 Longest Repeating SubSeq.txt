Given a string, find the length of the longest repeating subsequence such that the two subsequences 
don’t have same string character at the same position, i.e., any i’th character in the two subsequences 
shouldn’t have the same index in the original string.

Input: str = "abc"
Output: 0
There is no repeating subsequence

Input: str = "aab"
Output: 1
The two subssequence are 'a'(first) and 'a'(second). 
Note that 'b' cannot be considered as part of subsequence 
as it would be at same index in both.

Input: str = "aabb"
Output: 2

Input: str = "axxxy"
Output: 2

public class Main
{

/* Returns length of LCS for X[0..m-1], Y[0..n-1] */
static void lcs( char[] X, char[] Y, int m, int n )
{
	int T[][] = new int[m+1][n+1];

	/* Following steps build L[m+1][n+1] in bottom up fashion. Note
		that L[i][j] contains length of LCS of X[0..i-1] and Y[0..j-1] */
	for (int i=0; i<=m; i++)
	{
	for (int j=0; j<=n; j++)
	{
		if (i == 0 || j == 0)
			T[i][j] = 0;
		else if (X[i-1] == Y[j-1] && i!=j)
			T[i][j] = T[i-1][j-1] + 1;
		else
			T[i][j] = Math.max(T[i-1][j], T[i][j-1]);
	}
	}
    System.out.print(T[m][n]);
}


public static void main(String[] args)
{
	
	String s1 = "axxxy";
	String s2 = s1;

	char[] X=s1.toCharArray();
	char[] Y=s2.toCharArray();
	int m = X.length;
	int n = Y.length;

	lcs( X, Y, m, n );
}

}

